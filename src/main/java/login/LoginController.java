    /*
     * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
     * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
     */
    package login;

    import ruleagreement.RuleAgreementController;
    import management.ReservationMgmtView;

    import javax.swing.*;
    import java.io.*;
    import java.net.Socket;

    public class LoginController {

        private final LoginView view;
        private final LoginModel model;
        private final Socket socket;
        private final BufferedWriter out;
        private final BufferedReader in;

        public LoginController(LoginView view, LoginModel model) {
            this.view = view;
            this.model = model;

            Socket tempSocket = null;
            BufferedWriter tempOut = null;
            BufferedReader tempIn = null;

            try {
                tempSocket = new Socket("127.0.0.1", 5000);
                tempOut = new BufferedWriter(new OutputStreamWriter(tempSocket.getOutputStream()));
                tempIn = new BufferedReader(new InputStreamReader(tempSocket.getInputStream()));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(view, "ÏÑúÎ≤Ñ Ï†ëÏÜç Ïã§Ìå®: " + e.getMessage());
            }

            this.socket = tempSocket;
            this.out = tempOut;
            this.in = tempIn;
            setupListeners();
        }

        public LoginController(LoginView view, LoginModel model, Socket socket) throws IOException {
            this.view = view;
            this.model = model;
            this.socket = socket;
            this.out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            this.in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            setupListeners();
        }

        private void setupListeners() {
            view.getLoginButton().addActionListener(e -> attemptLogin());
            view.getRegisterButton().addActionListener(e -> handleSignup());
        }

        private void attemptLogin() {
            String userId = view.getUserId();
            String password = view.getPassword();
            String role = view.getRole(); // "ÌïôÏÉù", "ÍµêÏàò", "admin"

            try {
                out.write("LOGIN:" + userId + "," + password + "," + role);
                out.newLine();
                out.flush();

                String response = in.readLine();

                if ("LOGIN_SUCCESS".equals(response)) {
                    JOptionPane.showMessageDialog(view, userId + "Îãò Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ");

                    // üîΩ ÏÑúÎ≤ÑÏóê Ïú†Ï†Ä Ï†ïÎ≥¥ ÏöîÏ≤≠
                    out.write("INFO_REQUEST:" + userId + "\n");
                    out.flush();

                    String userInfoResponse = in.readLine();
                    String name = "ÏïåÏàòÏóÜÏùå";
                    String dept = "ÎØ∏ÏßÄÏ†ï";
                    String userType = role;

                    if (userInfoResponse != null && userInfoResponse.startsWith("INFO_RESPONSE:")) {
                        String[] parts = userInfoResponse.substring("INFO_RESPONSE:".length()).split(",");
                        if (parts.length >= 4) {
                            name = parts[1];
                            dept = parts[2];
                            userType = parts[3];
                        }
                    }

                    try {
                        if ("admin".equalsIgnoreCase(role)) {
                            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
                            new ReservationMgmtView().setVisible(true);
                        } else {
                            new RuleAgreementController(userId, userType, socket, out);
                        }
                        view.dispose();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(view, "ÌôîÎ©¥ Ï†ÑÌôò Ïò§Î•ò: " + ex.getMessage());
                    }

                }else if ("WAIT".equals(response)) {
        JOptionPane.showMessageDialog(view, "ÌòÑÏû¨ Ï†ëÏÜç Ïù∏Ïõê Ï¥àÍ≥ºÎ°ú ÎåÄÍ∏∞ Ï§ëÏûÖÎãàÎã§.");

        String line;
        while ((line = in.readLine()) != null) {
            if ("LOGIN_SUCCESS".equals(line)) {
                JOptionPane.showMessageDialog(view, userId + "Îãò ÏûêÎèô Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ");

                // ÏÑúÎ≤ÑÏóê Ï†ïÎ≥¥ ÏöîÏ≤≠
                out.write("INFO_REQUEST:" + userId);
                out.newLine();
                out.flush();
                 String userInfoResponse = in.readLine();
                    String name = "ÏïåÏàòÏóÜÏùå";
                    String dept = "ÎØ∏ÏßÄÏ†ï";
                    String userType = role;

                // ‚úÖ Ïó¨Í∏∞ÏÑú EDTÎ°ú ÏÉà Ï∞Ω ÎùÑÏö∞Í≥† Í∏∞Ï°¥ Ï∞Ω Îã´Í∏∞
                SwingUtilities.invokeLater(() -> {
                    try {
                        RuleAgreementController rac =
                            new RuleAgreementController(userId, userType, socket, out);
                        rac.showView();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(view,
                            "Ïù¥Ïö© ÎèôÏùò ÌôîÎ©¥ Ïò§Î•ò: " + ex.getMessage());
                    }
                    view.dispose();
                });
                break;
            }
        }
    }
                else {
                    JOptionPane.showMessageDialog(view, "Î°úÍ∑∏Ïù∏ Ïã§Ìå®");
                }

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(view, "ÏÑúÎ≤Ñ ÌÜµÏã† Ïò§Î•ò: " + ex.getMessage());
            }
        }

        private void handleSignup() {
            view.dispose();
            SignupView signupView = new SignupView();
            SignupModel signupModel = new SignupModel();
            new SignupController(signupView, signupModel);
            signupView.setVisible(true);
        }

    }
